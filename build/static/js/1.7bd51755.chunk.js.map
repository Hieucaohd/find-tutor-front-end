{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/utils/isWeb.ts","../../src/utils/isProxyEnabled.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/getFieldsValues.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/remove.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/utils/isFileInput.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/skipValidation.ts","../../src/utils/isFunction.ts","../../src/utils/isString.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/utils/debounce.ts","../../src/utils/getValidationModes.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/Subject.ts","../../src/useForm.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","F","s","n","done","value","e","_e","f","err","normalCompletion","didErr","step","next","_e2","element","type","data","Date","isObjectType","isNullOrUndefined","isDateObject","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","displayName","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","keys","formStateData","omit","isEmptyObject","find","window","HTMLElement","document","isWeb","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","field","_f","ref","focus","refs","getFieldsValues","fieldsRef","output","disabled","every","deepEqual","object1","object2","isErrorObject","isPrimitive","keys1","keys2","val1","val2","deepMerge","targetValue","sourceValue","setDirtyFields","values","defaultValues","dirtyFields","parentNode","parentName","slice","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","isValid","validResult","options","option","checked","map","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","fieldsRefs","criteriaMode","shouldUseNativeValidation","mounted","required","min","max","maxLength","minLength","pattern","validate","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","isString","RegExp","getValidateError","validationData","isRegex","a","inputValue","mount","inputRef","setCustomValidty","reportValidity","setCustomValidity","error","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","isFunction","validateError","validationResult","wait","timer","args","clearTimeout","setTimeout","mode","isOnSubmit","tearDowns","tearDown","this","push","teardown","observer","subscription","closed","add","observers","subscriber","isWindowUndefined","useForm","reValidateMode","resolver","context","shouldFocusError","delayError","shouldUnregister","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","updateFormState","resolverRef","formStateRef","defaultValuesRef","fieldArrayDefaultValuesRef","contextRef","inFieldArrayActionRef","isMountedRef","_delayCallback","subjectsRef","watch","control","array","state","namesRef","Set","unMount","watchAll","validationMode","getValidationModes","isValidateAllFieldCriteria","isFieldWatched","has","updateErrorState","shouldRenderBaseOnError","shouldSkipRender","fieldState","isValidFromResolver","isWatched","previousError","validateForm","debounce","updatedFormState","setFieldValue","rawValue","shouldRender","shouldRegister","register","isHTMLElement","forEach","radioRef","selectRef","includes","checkboxRef","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","getIsDirty","formValues","isCurrentTouched","isChanged","previousIsDirty","isPreviousFieldDirty","isCurrentFieldDirty","isPreviousFieldTouched","executeInlineValidation","skipReRender","validateField","executeResolverValidation","shouldCheckValid","valid","fieldError","fieldNames","convertToArrayPayload","schemaResult","Promise","all","fieldName","shouldFocus","updateIsValid","updateIsValidAndInputValue","shouldSkipValueAs","isValueUndefined","defaultChecked","setValues","entries","fieldKey","fieldValue","setValue","isFieldArray","isReset","setFieldArrayDirtyFields","getValues","handleValidate","parentNodeName","currentError","handleChange","inputType","shouldSkipValidation","hasValidation","skipValidation","clearErrors","inputName","setError","watchInternal","isGlobal","isArrayNames","fieldValues","subscribe","info","unregister","delete","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","isRadioOrCheckboxFunction","contains","onChange","onBlur","shouldUnmount","handleSubmit","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","registerAbsentFields","reset","keepStateOptions","updatedValues","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","formStateSubscription","shouldRenderFormState","useFieldArraySubscription","unsubscribe","unregisterFieldNames","isLiveInDom","getProxyFormState","_toConsumableArray","arr","arrayLikeToArray","iter","from"],"mappings":"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","file":"static/js/1.7bd51755.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\n\nexport default isProxyEnabled;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  output: FieldValues = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f && _f.ref\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      current &&\n        getFieldsValues(\n          {\n            current,\n          },\n          output[name],\n        );\n    }\n  }\n\n  return output;\n};\n\nexport default getFieldsValues;\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    isDateObject(object1) ||\n    isDateObject(object2)\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  mounted &&\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","export default <T extends Function>(callback: T, wait: number) => {\n  let timer = 0;\n  return (...args: any) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => callback(...args), wait);\n  };\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport getResolverOptions from './logic/getResolverOptions';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport debounce from './utils/debounce';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isDateObject from './utils/isDateObject';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  ValidateHandler,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  delayError,\n  shouldUseNativeValidation,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const resolverRef = React.useRef(resolver);\n  const formStateRef = React.useRef(formState);\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const defaultValuesRef =\n    React.useRef<DefaultValues<TFieldValues>>(defaultValues);\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const contextRef = React.useRef(context);\n  const inFieldArrayActionRef = React.useRef(false);\n  const isMountedRef = React.useRef(false);\n  const _delayCallback = React.useRef<any>();\n  const subjectsRef: Subjects<TFieldValues> = React.useRef({\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  });\n  const namesRef = React.useRef<Names>({\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n    watchAll: false,\n  });\n\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  resolverRef.current = resolver;\n  contextRef.current = context;\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    namesRef.current.watchAll ||\n    namesRef.current.watch.has(name) ||\n    namesRef.current.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const updateErrorState = (name: InternalFieldName, error: FieldError) => {\n    set(formStateRef.current.errors, name, error);\n\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const shouldRenderBaseOnError = React.useCallback(\n    async (\n      shouldSkipRender: boolean,\n      name: InternalFieldName,\n      error?: FieldError,\n      fieldState?: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      },\n      isValidFromResolver?: boolean,\n      isWatched?: boolean,\n    ): Promise<void> => {\n      const previousError = get(formStateRef.current.errors, name);\n      const isValid = readFormStateRef.current.isValid\n        ? resolver\n          ? isValidFromResolver\n          : await validateForm(fieldsRef.current, true)\n        : false;\n\n      if (delayError && error) {\n        _delayCallback.current =\n          _delayCallback.current || debounce(updateErrorState, delayError);\n\n        _delayCallback.current(name, error);\n      } else {\n        error\n          ? set(formStateRef.current.errors, name, error)\n          : unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (isWatched ||\n          (error ? !deepEqual(previousError, error, true) : previousError) ||\n          !isEmptyObject(fieldState) ||\n          formStateRef.current.isValid !== isValid) &&\n        !shouldSkipRender\n      ) {\n        const updatedFormState = {\n          ...fieldState,\n          isValid: !!isValid,\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        subjectsRef.current.state.next(isWatched ? { name } : updatedFormState);\n      }\n\n      subjectsRef.current.state.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const field = get(fieldsRef.current, name);\n\n      if (field) {\n        const _f = (field as Field)._f;\n\n        if (_f) {\n          const value =\n            isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n              ? ''\n              : rawValue;\n          _f.value = getFieldValueAs(rawValue, _f);\n\n          if (isRadioInput(_f.ref)) {\n            (_f.refs || []).forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === value),\n            );\n          } else if (isFileInput(_f.ref) && !isString(value)) {\n            _f.ref.files = value as FileList;\n          } else if (isMultipleSelect(_f.ref)) {\n            [..._f.ref.options].forEach(\n              (selectRef) =>\n                (selectRef.selected = (value as string[]).includes(\n                  selectRef.value,\n                )),\n            );\n          } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(value)\n                      ? !!(value as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : value === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!value);\n          } else {\n            _f.ref.value = value;\n          }\n\n          if (shouldRender) {\n            const values = getFieldsValues(fieldsRef);\n            set(values, name, rawValue);\n            subjectsRef.current.control.next({\n              values: {\n                ...defaultValuesRef.current,\n                ...values,\n              } as DefaultValues<TFieldValues>,\n              name,\n            });\n          }\n\n          (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirtyState(name, value, options.shouldTouch);\n          options.shouldValidate && trigger(name as Path<TFieldValues>);\n        } else {\n          field._f = {\n            ref: {\n              name,\n              value: rawValue,\n            },\n            value: rawValue,\n          };\n        }\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateTouchAndDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      isCurrentTouched?: boolean,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      const state: Partial<FormState<TFieldValues>> & { name: string } = {\n        name,\n      };\n      let isChanged = false;\n\n      if (readFormStateRef.current.isDirty) {\n        const previousIsDirty = formStateRef.current.isDirty;\n        formStateRef.current.isDirty = getIsDirty();\n        state.isDirty = formStateRef.current.isDirty;\n        isChanged = previousIsDirty !== state.isDirty;\n      }\n\n      if (readFormStateRef.current.dirtyFields && !isCurrentTouched) {\n        const isPreviousFieldDirty = get(\n          formStateRef.current.dirtyFields,\n          name,\n        );\n        const isCurrentFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        isCurrentFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n        state.dirtyFields = formStateRef.current.dirtyFields;\n        isChanged =\n          isChanged ||\n          isPreviousFieldDirty !== get(formStateRef.current.dirtyFields, name);\n      }\n\n      const isPreviousFieldTouched = get(\n        formStateRef.current.touchedFields,\n        name,\n      );\n\n      if (isCurrentTouched && !isPreviousFieldTouched) {\n        set(formStateRef.current.touchedFields, name, isCurrentTouched);\n        state.touchedFields = formStateRef.current.touchedFields;\n        isChanged =\n          isChanged ||\n          (readFormStateRef.current.touchedFields &&\n            isPreviousFieldTouched !== isCurrentTouched);\n      }\n\n      isChanged && shouldRender && subjectsRef.current.state.next(state);\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeInlineValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender: boolean,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n          shouldUseNativeValidation,\n        )\n      )[name];\n\n      await shouldRenderBaseOnError(skipReRender, name, error);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeResolverValidation = React.useCallback(\n    async (names?: InternalFieldName[]) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        getResolverOptions(\n          namesRef.current.mount,\n          fieldsRef.current,\n          criteriaMode,\n          shouldUseNativeValidation,\n        ),\n      );\n\n      if (names) {\n        for (const name of names) {\n          const error = get(errors, name);\n          error\n            ? set(formStateRef.current.errors, name, error)\n            : unset(formStateRef.current.errors, name);\n        }\n      } else {\n        formStateRef.current.errors = errors;\n      }\n\n      return errors;\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const validateForm = async (\n    fieldsRef: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n            shouldUseNativeValidation,\n          );\n\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            fieldError[_f.name]\n              ? set(formStateRef.current.errors, _f.name, fieldError[_f.name])\n              : unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name, options = {}) => {\n      const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n      let isValid;\n\n      subjectsRef.current.state.next({\n        isValidating: true,\n      });\n\n      if (resolver) {\n        const schemaResult = await executeResolverValidation(\n          isUndefined(name) ? name : fieldNames,\n        );\n        isValid = name\n          ? fieldNames.every((name) => !get(schemaResult, name))\n          : isEmptyObject(schemaResult);\n      } else {\n        if (name) {\n          isValid = (\n            await Promise.all(\n              fieldNames\n                .filter((fieldName) => get(fieldsRef.current, fieldName, {})._f)\n                .map(\n                  async (fieldName) =>\n                    await executeInlineValidation(fieldName, true),\n                ),\n            )\n          ).every(Boolean);\n        } else {\n          await validateForm(fieldsRef.current);\n          isValid = isEmptyObject(formStateRef.current.errors);\n        }\n      }\n\n      subjectsRef.current.state.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n      });\n\n      if (options.shouldFocus && !isValid) {\n        focusFieldBy(\n          fieldsRef.current,\n          (key) => get(formStateRef.current.errors, key),\n          name ? fieldNames : namesRef.current.mount,\n        );\n      }\n\n      readFormStateRef.current.isValid && updateIsValid();\n\n      return isValid;\n    },\n    [executeResolverValidation, executeInlineValidation],\n  );\n\n  const updateIsValidAndInputValue = (\n    name: InternalFieldName,\n    ref?: Ref,\n    shouldSkipValueAs?: boolean,\n  ) => {\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isValueUndefined = isUndefined(field._f.value);\n      const defaultValue = isValueUndefined\n        ? isUndefined(get(fieldArrayDefaultValuesRef.current, name))\n          ? get(defaultValuesRef.current, name)\n          : get(fieldArrayDefaultValuesRef.current, name)\n        : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        if (ref && (ref as HTMLInputElement).defaultChecked) {\n          field._f.value = getFieldValue(field);\n        } else if (shouldSkipValueAs) {\n          field._f.value = defaultValue;\n        } else {\n          setFieldValue(name, defaultValue);\n        }\n      } else if (isValueUndefined) {\n        field._f.value = getFieldValue(field);\n      }\n    }\n\n    isMountedRef.current && readFormStateRef.current.isValid && updateIsValid();\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const isValid = resolver\n        ? isEmptyObject(\n            (\n              await resolverRef.current!(\n                {\n                  ...getFieldsValues(fieldsRef),\n                  ...values,\n                },\n                contextRef.current,\n                getResolverOptions(\n                  namesRef.current.mount,\n                  fieldsRef.current,\n                  criteriaMode,\n                  shouldUseNativeValidation,\n                ),\n              )\n            ).errors,\n          )\n        : await validateForm(fieldsRef.current, true);\n\n      if (isValid !== formStateRef.current.isValid) {\n        formStateRef.current.isValid = isValid;\n        subjectsRef.current.state.next({\n          isValid,\n        });\n      }\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const setValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n        const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = namesRef.current.array.has(name);\n\n        (isFieldArray || !isPrimitive(fieldValue) || (field && !field._f)) &&\n        !isDateObject(fieldValue)\n          ? setValues(\n              fieldName,\n              fieldValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              fieldValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = namesRef.current.array.has(name);\n\n    if (isFieldArray) {\n      subjectsRef.current.array.next({\n        values: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        subjectsRef.current.state.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    ((field && !field._f) || isFieldArray) && !isNullOrUndefined(value)\n      ? setValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && subjectsRef.current.state.next({});\n    subjectsRef.current.watch.next({ name, values: getValues() });\n  };\n\n  const handleValidate: ValidateHandler = async (\n    target,\n    fieldState,\n    isWatched,\n    isBlurEvent,\n  ) => {\n    let error;\n    let isValid;\n    let name = target.name;\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (resolver) {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        getResolverOptions(\n          [name],\n          fieldsRef.current,\n          criteriaMode,\n          shouldUseNativeValidation,\n        ),\n      );\n      error = get(errors, name);\n\n      if (isCheckBoxInput(target as Ref) && !error) {\n        const parentNodeName = getNodeParentName(name);\n        const currentError = get(errors, parentNodeName, {});\n        currentError.type && currentError.message && (error = currentError);\n\n        if (currentError || get(formStateRef.current.errors, parentNodeName)) {\n          name = parentNodeName;\n        }\n      }\n\n      isValid = isEmptyObject(errors);\n    } else {\n      error = (\n        await validateField(\n          field,\n          isValidateAllFieldCriteria,\n          shouldUseNativeValidation,\n        )\n      )[name];\n    }\n\n    !isBlurEvent &&\n      subjectsRef.current.watch.next({\n        name,\n        type: target.type,\n        values: getValues(),\n      });\n\n    shouldRenderBaseOnError(false, name, error, fieldState, isValid, isWatched);\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, name, type: inputType } }) => {\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolver &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const fieldState = updateTouchAndDirtyState(\n          name,\n          field._f.value,\n          isBlurEvent,\n          false,\n        );\n\n        const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            subjectsRef.current.watch.next({\n              name,\n              type,\n              values: getValues(),\n            });\n          return (\n            shouldRender &&\n            subjectsRef.current.state.next(\n              isWatched ? { name } : { ...fieldState, name },\n            )\n          );\n        }\n\n        subjectsRef.current.state.next({\n          isValidating: true,\n        });\n\n        handleValidate(target, fieldState, isWatched, isBlurEvent);\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...defaultValuesRef.current,\n      ...getFieldsValues(fieldsRef),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    subjectsRef.current.state.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal, formValues) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues =\n        formValues || isMountedRef.current\n          ? {\n              ...defaultValuesRef.current,\n              ...(formValues || getFieldsValues(fieldsRef)),\n            }\n          : isUndefined(defaultValue)\n          ? defaultValuesRef.current\n          : isArrayNames\n          ? defaultValue\n          : { [fieldNames as InternalFieldName]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (namesRef.current.watchAll = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of convertToArrayPayload(fieldNames)) {\n        isGlobal && namesRef.current.watch.add(fieldName as InternalFieldName);\n        result.push(get(fieldValues, fieldName as InternalFieldName));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? subjectsRef.current.watch.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : namesRef.current.mount) {\n      namesRef.current.mount.delete(inputName);\n      namesRef.current.array.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(defaultValuesRef.current, inputName);\n      }\n    }\n\n    subjectsRef.current.watch.next({\n      values: getValues(),\n    });\n\n    subjectsRef.current.state.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    updateIsValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options = {}) => {\n      const field = get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(field && field._f ? field._f : { ref: { name } }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      namesRef.current.mount.add(name);\n      !field && updateIsValidAndInputValue(name, undefined, true);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name, {}) as Field;\n                const shouldUnmount =\n                  shouldUnregister || options.shouldUnregister;\n\n                if (field._f) {\n                  field._f.mount = false;\n                  // If initial state of field element is disabled,\n                  // value is not set on first \"register\"\n                  // re-sync the value in when it switched to enabled\n                  if (isUndefined(field._f.value)) {\n                    field._f.value = field._f.ref.value;\n                  }\n                }\n\n                shouldUnmount &&\n                  !(\n                    isNameInFieldArray(namesRef.current.array, name) &&\n                    inFieldArrayActionRef.current\n                  ) &&\n                  namesRef.current.unMount.add(name);\n              }\n            },\n          };\n    },\n    [],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(fieldsRef);\n\n      subjectsRef.current.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolver) {\n          const { errors, values } = await resolverRef.current!(\n            fieldValues,\n            contextRef.current,\n            getResolverOptions(\n              namesRef.current.mount,\n              fieldsRef.current,\n              criteriaMode,\n              shouldUseNativeValidation,\n            ),\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          subjectsRef.current.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key) => get(formStateRef.current.errors, key),\n              namesRef.current.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        subjectsRef.current.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [\n      shouldFocusError,\n      isValidateAllFieldCriteria,\n      criteriaMode,\n      shouldUseNativeValidation,\n    ],\n  );\n\n  const registerAbsentFields = <T extends DefaultValues<TFieldValues>>(\n    defaultValues: T,\n    name = '',\n  ): void => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(fieldsRef.current, fieldName);\n\n      if (!field || !field._f) {\n        if (isObject(value) || Array.isArray(value)) {\n          registerAbsentFields(value, fieldName);\n        } else if (!field) {\n          register(fieldName as Path<TFieldValues>, { value });\n        }\n      }\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of namesRef.current.mount) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    if (!keepStateOptions.keepDefaultValues) {\n      defaultValuesRef.current = { ...updatedValues };\n      fieldArrayDefaultValuesRef.current = { ...updatedValues };\n    }\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      subjectsRef.current.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? defaultValuesRef.current\n          : { ...updatedValues },\n      });\n\n      subjectsRef.current.watch.next({\n        values: { ...updatedValues },\n      });\n\n      subjectsRef.current.array.next({\n        values: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    namesRef.current = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n    };\n\n    subjectsRef.current.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? formStateRef.current.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? formStateRef.current.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(values, defaultValuesRef.current)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? formStateRef.current.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? formStateRef.current.dirtyFields\n        : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? formStateRef.current.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    isMountedRef.current = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(state) {\n        if (state.values && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.values);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const unregisterFieldNames = [];\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    if (!isMountedRef.current) {\n      isMountedRef.current = true;\n      readFormStateRef.current.isValid && updateIsValid();\n      !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n    }\n\n    for (const name of namesRef.current.unMount) {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregisterFieldNames.push(name);\n    }\n\n    unregisterFieldNames.length &&\n      unregister(unregisterFieldNames as FieldPath<TFieldValues>[]);\n\n    namesRef.current.unMount = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        inFieldArrayActionRef,\n        getIsDirty,\n        subjectsRef,\n        watchInternal,\n        fieldsRef,\n        updateIsValid,\n        namesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        setValues,\n        unregister,\n        shouldUnmount: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}