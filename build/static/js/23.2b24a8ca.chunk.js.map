{"version":3,"sources":["features/ParentRoom/parentroom.js","graphql/TutorRoomQueries.js","features/Tutor/TutorInfor.jsx"],"names":["deleteFromWaitingList","a","waitingId","token","fetch","server_name","method","headers","Authorization","token_prefix","console","log","deleteTutorFromTeachingList","teachingId","isOnList","userId","waitingList","length","i","Number","tutor","user","id","getTutorRoomList","query","fetchGraphQl","parentRoom","tutormodel","useStyles","makeStyles","theme","root","marginTop","breakpoints","down","padding","up","margin","marginLeft","label","apply","borderRadius","marginBottom","applyLabel","textAlign","fontSize","color","borderTopLeftRadius","borderTopRightRadius","teaching","teachingLabel","none","fontWeight","fontStyle","TutorInfor","useSelector","selectToken","classes","selectId_of_user","useState","applyList","setApplyList","teachingList","setTeachingList","useEffect","fetchRoomList","listRoom","waitingtutormodel_set","tutorteachingmodel_set","handleDeleteFromApplyList","newList","forEach","item","push","handleDeleteFromTeachingList","className","Grid","container","map","room","Room","parent_room","roomId","onDelete","type"],"mappings":"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","file":"static/js/23.2b24a8ca.chunk.js","sourcesContent":["import { server_name, token_prefix } from \"namespace\";\n\nexport const deleteFromWaitingList = async ({waitingId, token}) => {\n    try {\n        await fetch(\n            `${server_name}/findTutor/waitingTutorDetail/${waitingId}`,\n            {\n              method: \"DELETE\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `${token_prefix} ${token}`,\n              },\n            }\n        );\n        return true;\n    } catch (error) {\n        console.log(\"Failed to delete tutor from waiting list: \", error);\n    }\n}\n\nexport const deleteTutorFromTeachingList = async ({teachingId, token}) => {\n    try {\n        await fetch(\n            `${server_name}/findTutor/teachingDetail/${teachingId}`,\n            {\n              method: \"DELETE\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `${token_prefix} ${token}`,\n              },\n            }\n        );\n        return true;\n    } catch(error) {\n        console.log(\"Failed to delete tutors from teaching list: \", error)\n    }\n}\n\nexport const isOnList = (userId, waitingList) => {\n  if(!waitingList) return false;\n  if(waitingList?.length === 0) {\n    return false;\n  }\n  for(let i = 0; i<waitingList?.length; i++) {\n    if(Number(waitingList[i]?.tutor?.user?.id) === Number(userId)) {\n      return true;\n    }\n  }\n  return false;\n}","import { fetchGraphQl } from \"./graphQl\"\n\nexport const GetTutorWaitingList =  async (id) => {\n    const query = `\n    {\n        user_by_id(id: ${id}){\n            tutormodel {\n                waitingtutormodel_set {\n                    id\n                    parent_room {\n                        id\n                        province_code\n                        district_code\n                        ward_code\n                        subject\n                        lop\n                        number_waiting\n                        pricemodel_set {\n                            money_per_day\n                            time_in_one_day\n                            type_teacher\n                            sex_of_teacher\n                        }\n                    }\n                }  \n            }\n        }\n    }\n    `\n    const tutorModel = await fetchGraphQl(\"tutor's waiting list\", \"user_by_id\", query);\n    const parentRoom = await tutorModel?.tutormodel.waitingtutormodel_set.map((item) => {\n        return {...item.parent_room, roomId: item.parent_room.id, id: item.id};\n    });\n    return parentRoom;\n}\n\nexport const GetTutorInvitedList =  async (id) => {\n    const query = `\n    {\n        user_by_id(id: ${id}){\n            tutormodel {\n                listinvitedmodel_set {\n                    id\n                    parent_room{\n                        id\n                        province_code\n                        district_code\n                        ward_code\n                        subject\n                        lop\n                        parent {\n                            user {\n                                id\n                                username\n                                imageprivateusermodel {\n                                    avatar\n                                }\n                        }\n                        number_waiting\n                        pricemodel_set {\n                            money_per_day\n                            time_in_one_day\n                            type_teacher\n                            sex_of_teacher\n                        }\n                    }\n                }  \n            }\n        }\n    }\n    `\n    const tutorModel = await fetchGraphQl(\"tutor's invited list\", \"user_by_id\", query);\n    const parentRoom = await tutorModel?.tutormodel.listinvitedmodel_set.map((item) => {\n        return {...item.parent_room, roomId: item.parent_room.id, id: item.id};\n    });\n    return parentRoom;\n}\n\nexport const GetTutorTryTeachingList = async (id) => {\n    const query = ` \n    {\n        user_by_id(id: ${id}){\n            tutormodel {\n                tryteachingmodel_set {\n                    id\n                    parent_room{\n                        id\n                        province_code\n                        district_code\n                        ward_code\n                        subject\n                        lop\n                        number_waiting\n                        pricemodel_set {\n                            money_per_day\n                            time_in_one_day\n                            type_teacher\n                            sex_of_teacher\n                          }\n                    }\n                }  \n            }\n        }\n    }`\n    const tutorModel = await fetchGraphQl(\"tutor's try teaching list\", \"user_by_id\", query);\n    const parentRoom = await tutorModel?.tutormodel.tryteachingmodel_set.map((item) => {\n        return {...item.parent_room, roomId: item.parent_room.id, id: item.id};\n    });\n    return parentRoom;\n};\n\nexport const GetTutorTeachingList = async (id) => {\n    const query = ` \n    {\n        user_by_id(id: ${id}){\n            tutormodel {\n                tutorteachingmodel_set {\n                    id\n                    parent_room{\n                        id\n                        parent {\n                            user {\n                                username\n                            }\n                        }\n                        province_code\n                        district_code\n                        ward_code\n                        subject\n                        lop\n                        number_waiting\n                        pricemodel_set {\n                            money_per_day\n                            time_in_one_day\n                            type_teacher\n                            sex_of_teacher\n                          }\n                    }\n                }  \n            }\n        }\n    }`\n    const tutorModel = await fetchGraphQl(\"tutor's teaching list\", \"user_by_id\", query);\n    const parentRoom = await tutorModel?.tutormodel.tutorteachingmodel_set.map((item) => {\n        return {...item.parent_room, roomId: item.parent_room.id, id: item.id};\n    });\n    return parentRoom;\n};\n\nexport const getTutorRoomList = async (id) => {\n    const query = ` \n    {\n        user_by_id(id: ${id}){\n            tutormodel {\n                waitingtutormodel_set {\n                    id\n                    parent_room {\n                        id\n                        province_code\n                        district_code\n                        ward_code\n                        subject\n                        lop\n                        parent {\n                            user {\n                                username\n                            }\n                        }\n                        number_waiting\n                        create_at\n                        pricemodel_set {\n                            money_per_day\n                            time_in_one_day\n                            type_teacher\n                            sex_of_teacher\n                        }\n                    }\n                } \n                tutorteachingmodel_set {\n                    id\n                    parent_room{\n                        id\n                        province_code\n                        district_code\n                        ward_code\n                        subject\n                        lop\n                        parent {\n                            user {\n                                username\n                            }\n                        }\n                        number_waiting\n                        create_at\n                        pricemodel_set {\n                            money_per_day\n                            time_in_one_day\n                            type_teacher\n                            sex_of_teacher\n                          }\n                    }\n                }  \n            }\n        }\n    }`\n    const parentRoom = await fetchGraphQl(\"tutor's teaching list\", \"user_by_id\", query);\n    return parentRoom.tutormodel;\n}\n","import { Grid, makeStyles } from \"@material-ui/core\";\nimport Room from \"components/Room/Room\";\nimport { deleteFromWaitingList, deleteTutorFromTeachingList } from \"features/ParentRoom/parentroom\";\nimport { getTutorRoomList } from \"graphql/TutorRoomQueries\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectId_of_user, selectToken } from \"../auth/authSlice\";\n\nfunction TutorInfor() {\n  const token = useSelector(selectToken);\n  const classes = useStyles();\n  const userId = useSelector(selectId_of_user);\n  const [applyList, setApplyList] = useState([]);\n  const [teachingList, setTeachingList] = useState([]);\n  \n  useEffect(() => {\n    const fetchRoomList = async () => {\n      const listRoom = await getTutorRoomList(userId);\n      await setApplyList(listRoom.waitingtutormodel_set);\n      await setTeachingList(listRoom.tutorteachingmodel_set);\n  }\n  \n    if (token) {\n      // dispatch something here.\n      fetchRoomList();\n    }\n  }, [token, userId]);\n\n  const handleDeleteFromApplyList = async (waitingId) => {\n    try {\n      await deleteFromWaitingList({token: token, waitingId: waitingId});\n      const newList = [];\n      await applyList.forEach((item) => {\n        if(Number(item.id) !== Number(waitingId)) {\n          newList.push(item);\n        }\n      });\n      setApplyList(newList);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const handleDeleteFromTeachingList = async (teachingId) => {\n    try {\n      await deleteTutorFromTeachingList({token: token, teachingId: teachingId});\n      const newList = [];\n      await teachingList.forEach((item) => {\n        if(Number(item.id) !== Number(teachingId)) {\n          newList.push(item);\n        }\n      });\n      setTeachingList(newList);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.apply}>\n        <h5 className={classes.applyLabel}>Phòng đã ứng tuyển</h5>\n        {applyList?.length ? <Grid container>\n        {applyList?.map((room)=> (\n             <Room key={room.id} room={{...room.parent_room, id: room.id, roomId: room.parent_room.id}} onDelete={handleDeleteFromApplyList} type=\"userroom\"/>\n        ))}\n        </Grid> : <h5 className={classes.none}>(Không có phòng nào)</h5>}\n      </div>\n      <div className={classes.teaching}>\n        <h5 className={classes.teachingLabel}>Danh sách dạy học</h5>\n        {teachingList?.length !== 0 ? <Grid container>\n        {teachingList?.map((room)=> (\n             <Room key={room.id} room={{...room.parent_room, id: room.id, roomId: room.parent_room.id}} onDelete={handleDeleteFromTeachingList} type=\"userroom\"/>\n        ))}\n        </Grid> : <h5 className={classes.none}>(Không có phòng nào)</h5> }\n      </div>\n        \n    </div>\n  );\n}\n\nconst useStyles = makeStyles( theme => ({\n  root: {\n    marginTop: \"40px\",\n    [theme.breakpoints.down('xs')]: {\n      padding: \"52px 24px\",\n    },\n    [theme.breakpoints.up('sm')]: {\n      padding: \"52px\",\n    },\n    \"&>h4\": {\n      margin: 0,\n      marginTop: '32px',\n      marginLeft: '24px',\n    },\n  },\n  label: {\n    \n  },\n  apply: {\n    \"background-image\": \"linear-gradient( 135deg, #3C8CE7 10%, #00EAFF 100%)\",\n    borderRadius: 8,\n    marginBottom: 32,\n  },\n  applyLabel: {\n    textAlign: \"center\",\n    fontSize: 16,\n    margin: 0,\n    color: 'white',\n    padding: 8,\n    marginBottom: 16,\n    borderTopLeftRadius: 8,\n    borderTopRightRadius: 8,\n  },\n  teaching: {\n    \"background-image\": \"linear-gradient( 135deg, #70F570 10%, #49C628 100%)\",\n    borderRadius: 8,\n    marginBottom: 32,\n  },\n  teachingLabel: {\n    textAlign: \"center\",\n    fontSize: 16,\n    margin: 0,\n    color: 'white',\n    padding: 8,\n    marginBottom: 16,\n    borderTopLeftRadius: 8,\n    borderTopRightRadius: 8,\n  },\n  none: {\n    textAlign: 'center',\n    color: 'white',\n    fontWeight: 300,\n    margin: 0,\n    fontStyle: 'italic',\n  }\n}))\n\nexport default TutorInfor;\n"],"sourceRoot":""}